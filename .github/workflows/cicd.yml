name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev


jobs:
  lint:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install flake8 black

      - name: Lint with flake8
        run: flake8 . --ignore E501,W503,F401

      - name: Format with black
        run: black emsa emsa_examples tests --line-length=100

  test:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest coverage

      - name: Run tests and generate coverage
        run: |
          coverage run -m pytest
          coverage report

  bump:
    if: |
      github.ref == 'refs/heads/main' &&
      !contains(github.event.head_commit.message, '[skip bump]')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Bump version and push tag
        uses: QustodioPablo/github-bumpversion-action@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GHUB_TOKEN }}

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GHUB_TOKEN }}
          tags: true
      - name: Wait for push to propagate
        run: sleep 30

  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    needs: bump
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      !failure() &&
      !cancelled()

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Fetch latest changes
      run: git pull

    - name: Install dependencies
      run: pip install twine setuptools

    - name: Build package
      run: python setup.py sdist

    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    if: github.ref == 'refs/heads/main'
    name: Publish Python üêç distribution üì¶ to PyPI
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/emsa
    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
